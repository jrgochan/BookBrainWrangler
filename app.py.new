"""
Book Knowledge AI - Main Application
A Streamlit-powered book management and knowledge extraction application 
that transforms documents into an interactive, AI-enhanced knowledge base.
"""

import streamlit as st
import os
import time

# Import module classes
from book_manager import BookManager
from document_processor import DocumentProcessor
from knowledge_base import KnowledgeBase
from ollama_client import OllamaClient

# Import pages
from pages.book_management import render_book_management_page
from pages.knowledge_base import render_knowledge_base_page
from pages.chat_with_ai import render_chat_with_ai_page
from pages.knowledge_base_explorer import render_knowledge_base_explorer_page
from pages.word_cloud_generator import render_word_cloud_generator_page
from pages.settings import render_settings_page

# Import UI helpers
from utils.ui_helpers import set_page_config

# Import configuration
from config.settings import (
    APP_TITLE, 
    APP_ICON, 
    APP_LAYOUT, 
    INITIAL_SIDEBAR_STATE,
    APP_MODES
)

# Initialize the components
@st.cache_resource
def initialize_components():
    """Initialize all major application components."""
    book_manager = BookManager()
    document_processor = DocumentProcessor()
    knowledge_base = KnowledgeBase()
    
    # Initialize Ollama client with settings from session state if available
    if 'ollama_host' in st.session_state and 'ollama_model' in st.session_state:
        ollama_client = OllamaClient(
            host=st.session_state.ollama_host,
            model=st.session_state.ollama_model
        )
    else:
        ollama_client = OllamaClient()
        
    return book_manager, document_processor, knowledge_base, ollama_client

def initialize_session_state():
    """Initialize session state variables if they don't exist."""
    # App mode state
    if 'app_mode' not in st.session_state:
        st.session_state.app_mode = APP_MODES[0]
    
    # Book details state
    if 'selected_book_id' not in st.session_state:
        st.session_state.selected_book_id = None
    
    # Ollama settings
    if 'ollama_host' not in st.session_state:
        st.session_state.ollama_host = os.environ.get("OLLAMA_HOST", "http://localhost:11434")
    if 'ollama_model' not in st.session_state:
        st.session_state.ollama_model = os.environ.get("OLLAMA_MODEL", "llama2")
    
    # OCR settings
    if 'ocr_settings' not in st.session_state:
        st.session_state.ocr_settings = {
            'display_interval': 1,
            'confidence_threshold': 70,
            'show_current_image': True,
            'show_extracted_text': True
        }

def render_sidebar(app_modes):
    """Render the sidebar for application navigation."""
    st.sidebar.title(APP_TITLE)
    
    # Mode selection
    selected_mode = st.sidebar.selectbox(
        "Select Mode",
        app_modes,
        index=app_modes.index(st.session_state.app_mode) if st.session_state.app_mode in app_modes else 0
    )
    
    # Update the session state if the mode changed
    if selected_mode != st.session_state.app_mode:
        st.session_state.app_mode = selected_mode
        st.rerun()
    
    # Add a bit of space
    st.sidebar.markdown("---")
    
    return selected_mode

def main():
    """Main application entry point."""
    # Set the page configuration
    set_page_config(APP_TITLE, APP_ICON, APP_LAYOUT, INITIAL_SIDEBAR_STATE)
    
    # Initialize session state
    initialize_session_state()
    
    # Initialize components
    book_manager, document_processor, knowledge_base, ollama_client = initialize_components()
    
    # Render sidebar and get selected mode
    selected_mode = render_sidebar(APP_MODES)
    
    # Render the selected page
    if selected_mode == "Book Management":
        render_book_management_page(book_manager, document_processor, knowledge_base)
    
    elif selected_mode == "Knowledge Base":
        render_knowledge_base_page(book_manager, knowledge_base)
    
    elif selected_mode == "Chat with AI":
        render_chat_with_ai_page(ollama_client, knowledge_base)
    
    elif selected_mode == "Knowledge Base Explorer":
        render_knowledge_base_explorer_page(knowledge_base)
    
    elif selected_mode == "Word Cloud Generator":
        render_word_cloud_generator_page(book_manager)
    
    elif selected_mode == "Settings":
        render_settings_page(ollama_client)

# Run the application
if __name__ == "__main__":
    main()